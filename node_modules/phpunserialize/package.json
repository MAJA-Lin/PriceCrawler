{
  "_args": [
    [
      "bd808/php-unserialize-js",
      "C:\\wamp64\\www\\PriceCrawler"
    ]
  ],
  "_from": "bd808/php-unserialize-js",
  "_id": "phpunserialize@1.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/phpunserialize",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/bd808/php-unserialize-js/master/package.json",
      "gitUrl": "git://github.com/bd808/php-unserialize-js.git",
      "httpsUrl": "git+https://github.com/bd808/php-unserialize-js.git",
      "shortcut": "github:bd808/php-unserialize-js",
      "ssh": "git@github.com:bd808/php-unserialize-js.git",
      "sshUrl": "git+ssh://git@github.com/bd808/php-unserialize-js.git",
      "type": "github"
    },
    "name": null,
    "raw": "bd808/php-unserialize-js",
    "rawSpec": "bd808/php-unserialize-js",
    "scope": null,
    "spec": "github:bd808/php-unserialize-js",
    "type": "hosted"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/bd808/php-unserialize-js.git#7086eafc04e89f4240db235c70a4755e3bf3dc78",
  "_shasum": "2373711c33b9e755e97d8074aafa26915c25a34e",
  "_shrinkwrap": null,
  "_spec": "bd808/php-unserialize-js",
  "_where": "C:\\wamp64\\www\\PriceCrawler",
  "author": {
    "email": "bd808@bd808.com",
    "name": "Bryan Davis",
    "url": "http://bd808.com"
  },
  "bugs": {
    "url": "https://github.com/bd808/php-unserialize-js/issues"
  },
  "dependencies": {},
  "description": "Convert serialized PHP data to a javascript object graph",
  "devDependencies": {},
  "gitHead": "7086eafc04e89f4240db235c70a4755e3bf3dc78",
  "homepage": "https://github.com/bd808/php-unserialize-js",
  "keywords": [
    "php",
    "serialization",
    "unserialize"
  ],
  "license": "MIT",
  "main": "phpUnserialize.js",
  "name": "phpunserialize",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://img.shields.io/travis/bd808/php-unserialize-js.svg?style=flat)](https://travis-ci.org/bd808/php-unserialize-js)\n[![npm version](https://img.shields.io/npm/v/phpunserialize.svg?style=flat)](https://www.npmjs.com/package/phpunserialize)\n[![Bower](https://img.shields.io/bower/v/phpunserialize.svg?style=flat)]()\n\nphpUnserialize\n==============\n\nConvert serialized PHP data to a javascript object graph.\n\n\nWhy?\n----\n> OMG why would anyone do something this perverse? PHP has a `json_encode()`\n> method so you don't have to try and cobble together ugly hacks like this.\n\nIt all started so innocently. The guy at the desk next to mine asked \"hey is\nthere a javascript library that can turn this php serialize mess into\nsomething that I can read?\" I gaped. He explained that he was trying to slap\ntogether a js testing harness for a set of REST services that returned\nserialized PHP as their transport representation.\n\nA [google search][] turned up [something][] so I went back to listening to the\nlatest [OMM][] album. Fifteen minutes later the stream of curses coming from\nGallilama started harshing my groove. It turns out that the venerable phpjs\nfunction only handles a particular subset of PHP's `serialize` output.\nSpecifically it doesn't handle references and objects at all. Google found\na [java implementation][] that looked more complete. I did a quick port of it\nto javascript and moved on to my [$wingin' Utter$][] playlist.\n\nThe next day I checked in and found out that strange things were afoot with my\nport. It turns out that private and protected members `serialize` in an\n\"interesting\" way. PHP prepends the member name with either the class name\n(private) or an asterisk (protected) surrounded by null bytes (\\u0000). The\nhack parser was going into an infinite loop when it tried to extract these\nvalues.\n\nBy this point I was fully committed. Nothing less than a TDD validated library\nthat could handle just about any craziness I threw at it would do. I'm sure\nthere are still gaps, but this \"quick hack\" is working for our twisted needs.\n\n\nImplementation Details\n----------------------\nPHP's serialization format is not well documented, but this function takes\na best guess approach to parsing and interpreting it. Serialized integers,\nfloats, booleans, strings, arrays, objects and references are currently\nsupported.\n\nPHP's array type is a hybrid of javascript's array and object types.\nphpUnserialize translates PHP arrays having only 0-based consecutive numeric\nkeys into javascript arrays. All other arrays are translated into javascript\nobjects.\n\nSerialized members of a PHP object carry scope information via name mangling.\n`phpUnserialize` strips this scope signifier prefix from private and protected\nmembers.\n\nCheck out the [jasmine tests][] for more details or read the source.\n\n\nUsage\n-----\nThe `phpUnserialize.js` file implements the [Universal Module Definition][]\npattern which attempts to be compatible with multiple script loaders including\n[AMD][], [CommonJS][] and direct usage in an HTML file.\n\nPlain HTML:\n```html\n<script src=\"phpUnserialize.js\"></script>\n<script>\n  var foo = phpUnserialize('s:3:\"foo\";');\n</script>\n```\n\nWith an [AMD][] loader:\n```javascript\ndefine([\"phpunserialize\"], function (phpUnserialize) {\n  return {\n    foo: phpUnserialize('s:3:\"foo\";')\n  };\n});\n```\n\nWith a [CommonJS][] loader:\n```javascript\nvar phpUnserialize = require('phpunserialize');\nvar foo = phpUnserialize('s:3:\"foo\";');\n```\n\nRunning the Unit Tests\n----------------------\n```sh\nbundle install\nrake\n```\n\n---\n[google search]: https://www.google.com/search?q=php+unserialize+javascript\n[something]: http://phpjs.org/functions/unserialize/\n[OMM]: http://www.oldmanmarkley.com/\n[java implementation]: https://code.google.com/p/serialized-php-parser\n[$wingin' Utter$]: http://swinginutters.com/\n[jasmine tests]: spec/php-unserialize_spec.coffee\n[Universal Module Definition]: https://github.com/umdjs/umd\n[AMD]: https://github.com/amdjs/amdjs-api/blob/master/AMD.md\n[CommonJS]: http://wiki.commonjs.org/wiki/CommonJS\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bd808/php-unserialize-js.git"
  },
  "scripts": {
    "test": "bundle install && rake"
  },
  "version": "1.0.1"
}
